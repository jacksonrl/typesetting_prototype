// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by tool/generate_proxies.dart

// ignore_for_file: unused_field

import 'dart:core';
import 'dart:typed_data';

enum ScriptBuiltInFontName {
  helvetica,
  helveticaBold,
  helveticaOblique,
  helveticaBoldOblique,
  times,
  timesBold,
  timesItalic,
  timesBoldItalic,
  courier,
  courierBold,
  courierOblique,
  courierBoldOblique,
}

enum ScriptCrossAxisAlignment { start, end, center, stretch }

enum ScriptFontStyle { normal, italic }

enum ScriptFontWeight { normal, bold }

enum ScriptLineBreakMode { greedy, knuthPlass }

enum ScriptMainAxisAlignment { start, end, center }

enum ScriptMetadataRetrievalPolicy { onPage, latest, onPageThenLatest }

enum ScriptPageNumberStyle { arabic, romanLower, romanUpper }

enum ScriptTableCellVerticalAlignment { top, middle, bottom, fill }

enum ScriptTextDecoration { none, underline }

class ScriptAlign extends ScriptWidget {
  const ScriptAlign({this.alignment = ScriptAlignment.center, required this.child});

  final ScriptAlignment alignment;

  final ScriptWidget child;
}

class ScriptAlignment {
  const ScriptAlignment(this.x, this.y);

  static const ScriptAlignment topLeft = ScriptAlignment(-1.0, -1.0);

  static const ScriptAlignment topCenter = ScriptAlignment(0.0, -1.0);

  static const ScriptAlignment topRight = ScriptAlignment(1.0, -1.0);

  static const ScriptAlignment centerLeft = ScriptAlignment(-1.0, 0.0);

  static const ScriptAlignment center = ScriptAlignment(0.0, 0.0);

  static const ScriptAlignment centerRight = ScriptAlignment(1.0, 0.0);

  static const ScriptAlignment bottomLeft = ScriptAlignment(-1.0, 1.0);

  static const ScriptAlignment bottomCenter = ScriptAlignment(0.0, 1.0);

  static const ScriptAlignment bottomRight = ScriptAlignment(1.0, 1.0);

  final double x;

  final double y;
}

class ScriptBorder {
  const ScriptBorder({
    this.top = ScriptBorderSide.none,
    this.left = ScriptBorderSide.none,
    this.right = ScriptBorderSide.none,
    this.bottom = ScriptBorderSide.none,
  });

  const ScriptBorder.fromBorderSide(ScriptBorderSide side) : top = side, left = side, right = side, bottom = side;

  factory ScriptBorder.all({ScriptColor color = ScriptColor.black, double width = 1.0}) =>
      ScriptBorder.fromBorderSide(ScriptBorderSide(color: color, width: width));

  final ScriptBorderSide top;

  final ScriptBorderSide left;

  final ScriptBorderSide right;

  final ScriptBorderSide bottom;

  ScriptEdgeInsets get dimensions {
    return ScriptEdgeInsets.only(top: top.width, left: left.width, right: right.width, bottom: bottom.width);
  }
}

class ScriptBorderSide {
  const ScriptBorderSide({this.color = ScriptColor.black, this.width = 1.0});

  static const ScriptBorderSide none = ScriptBorderSide(width: 0.0);

  final ScriptColor color;

  final double width;
}

class ScriptBoxDecoration {
  const ScriptBoxDecoration({this.border});

  final ScriptBorder? border;
}

class ScriptColor {
  const ScriptColor(this.value);

  factory ScriptColor.fromHex(String hexString) {
    final hex = hexString.replaceFirst('#', '').toUpperCase();
    String finalHex;
    if (hex.length == 6) {
      finalHex = 'FF$hex';
    } else if (hex.length == 8) {
      finalHex = hex;
    } else {
      throw ArgumentError('Invalid hex color string: "$hexString". Must be in the format #RRGGBB or #AARRGGBB.');
    }
    return ScriptColor(int.parse(finalHex, radix: 16));
  }

  static const ScriptColor black = ScriptColor(0xFF000000);

  static const ScriptColor white = ScriptColor(0xFFFFFFFF);

  static const ScriptColor red = ScriptColor(0xFFFF0000);

  static const ScriptColor green = ScriptColor(0xFF00FF00);

  static const ScriptColor blue = ScriptColor(0xFF0000FF);

  final int value;
}

class ScriptColumn extends ScriptWidget {
  const ScriptColumn({
    this.children = const [],
    this.crossAxisAlignment = ScriptCrossAxisAlignment.start,
    this.mainAxisAlignment = ScriptMainAxisAlignment.start,
  });

  final List<ScriptWidget> children;

  final ScriptCrossAxisAlignment crossAxisAlignment;

  final ScriptMainAxisAlignment mainAxisAlignment;
}

class ScriptDecoratedBox extends ScriptWidget {
  const ScriptDecoratedBox({required this.decoration, required this.child});

  final ScriptBoxDecoration decoration;

  final ScriptWidget child;
}

class ScriptDocument {
  ScriptDocument({
    required this.body,
    this.tocBuilder,
    this.pageFormat = ScriptPageFormat.a4,
    this.pageMargin = const ScriptEdgeInsets.all(30),
  });

  final ScriptPageLayout body;

  final ScriptPageLayout Function(ScriptDocumentMetadataRegistry)? tocBuilder;

  final ScriptPageFormat pageFormat;

  final ScriptEdgeInsets pageMargin;
}

class ScriptDocumentMetadataRegistry {
  ScriptDocumentMetadataRegistry();

  List<ScriptMetadataRecord> records = [];

  dynamic add(String key, dynamic value, int pageNumber) {
    records.add(ScriptMetadataRecord(key: key, value: value, pageNumber: pageNumber));
  }

  dynamic updateFormattedNumbers(Map<int, String> pageNumberMap) {
    for (final record in records) {
      record.formattedPageNumber = pageNumberMap[record.pageNumber] ?? record.pageNumber.toString();
    }
  }

  dynamic finalizePageNumbers(int offset) {
    for (final record in records) {
      record.pageNumber = (record.pageNumber ?? 0) + offset;
    }
  }
}

class ScriptEdgeInsets {
  const ScriptEdgeInsets.fromLTRB(this.left, this.top, this.right, this.bottom);

  const ScriptEdgeInsets.zero() : bottom = 0.0, top = 0.0, left = 0.0, right = 0.0;

  const ScriptEdgeInsets.all(double value) : this.fromLTRB(value, value, value, value);

  const ScriptEdgeInsets.symmetric({double horizontal = 0.0, double vertical = 0.0})
    : left = horizontal,
      right = horizontal,
      top = vertical,
      bottom = vertical;

  const ScriptEdgeInsets.only({this.left = 0.0, this.top = 0.0, this.right = 0.0, this.bottom = 0.0});

  final double left;

  final double top;

  final double right;

  final double bottom;

  double get horizontal => left + right;

  double get vertical => top + bottom;
}

class ScriptExpanded extends ScriptWidget {
  const ScriptExpanded({required this.child, this.flex = 1});

  final ScriptWidget child;

  final int flex;
}

class ScriptFileImageSource extends ScriptImageSource {
  const ScriptFileImageSource(this.path);

  final String path;
}

class ScriptFixedColumnWidth extends ScriptTableColumnWidth {
  const ScriptFixedColumnWidth(this.width);

  final double width;
}

class ScriptFlexColumnWidth extends ScriptTableColumnWidth {
  const ScriptFlexColumnWidth(this.flex);

  final double flex;
}

class ScriptFlow extends ScriptWidget {
  const ScriptFlow({this.children = const []});

  final List<ScriptWidget> children;
}

class ScriptFlowFill extends ScriptWidget {
  const ScriptFlowFill({required this.child});

  final ScriptWidget child;
}

sealed class ScriptFont {
  const ScriptFont();

  static const ScriptFont helvetica = ScriptBuiltInFont(ScriptBuiltInFontName.helvetica);

  static const ScriptFont helveticaBold = ScriptBuiltInFont(ScriptBuiltInFontName.helveticaBold);

  static const ScriptFont helveticaOblique = ScriptBuiltInFont(ScriptBuiltInFontName.helveticaOblique);

  static const ScriptFont helveticaBoldOblique = ScriptBuiltInFont(ScriptBuiltInFontName.helveticaBoldOblique);

  static const ScriptFont times = ScriptBuiltInFont(ScriptBuiltInFontName.times);

  static const ScriptFont timesBold = ScriptBuiltInFont(ScriptBuiltInFontName.timesBold);

  static const ScriptFont timesItalic = ScriptBuiltInFont(ScriptBuiltInFontName.timesItalic);

  static const ScriptFont timesBoldItalic = ScriptBuiltInFont(ScriptBuiltInFontName.timesBoldItalic);

  static const ScriptFont courier = ScriptBuiltInFont(ScriptBuiltInFontName.courier);

  static const ScriptFont courierBold = ScriptBuiltInFont(ScriptBuiltInFontName.courierBold);

  static const ScriptFont courierOblique = ScriptBuiltInFont(ScriptBuiltInFontName.courierOblique);

  static const ScriptFont courierBoldOblique = ScriptBuiltInFont(ScriptBuiltInFontName.courierBoldOblique);
}

class ScriptFontFamily {
  const ScriptFontFamily({required this.regular, required this.bold, required this.italic, required this.boldItalic});

  factory ScriptFontFamily.fromFont(ScriptFont font) {
    return ScriptFontFamily(regular: font, bold: font, italic: font, boldItalic: font);
  }

  static const ScriptFontFamily helvetica = ScriptFontFamily(
    regular: ScriptFont.helvetica,
    bold: ScriptFont.helveticaBold,
    italic: ScriptFont.helveticaOblique,
    boldItalic: ScriptFont.helveticaBoldOblique,
  );

  static const ScriptFontFamily times = ScriptFontFamily(
    regular: ScriptFont.times,
    bold: ScriptFont.timesBold,
    italic: ScriptFont.timesItalic,
    boldItalic: ScriptFont.timesBoldItalic,
  );

  static const ScriptFontFamily courier = ScriptFontFamily(
    regular: ScriptFont.courier,
    bold: ScriptFont.courierBold,
    italic: ScriptFont.courierOblique,
    boldItalic: ScriptFont.courierBoldOblique,
  );

  final ScriptFont regular;

  final ScriptFont bold;

  final ScriptFont italic;

  final ScriptFont boldItalic;

  ScriptFont getVariant(ScriptFontWeight weight, ScriptFontStyle style) {
    if (weight == ScriptFontWeight.bold && style == ScriptFontStyle.italic) {
      return boldItalic;
    }
    if (weight == ScriptFontWeight.bold) {
      return bold;
    }
    if (style == ScriptFontStyle.italic) {
      return italic;
    }
    return regular;
  }
}

class ScriptFootnoteItem {
  const ScriptFootnoteItem({required this.footnoteNumber, required this.content});

  final int footnoteNumber;

  final String content;
}

class ScriptFootnoteLayoutInfo {
  ScriptFootnoteLayoutInfo({required this.content, required this.position, required this.number});

  final String content;

  double position;

  final int number;
}

class ScriptFormattedText extends ScriptWidget {
  const ScriptFormattedText(
    this.text, {
    this.fontSize = 12.0,
    this.fontFamily,
    this.lineHeight = 1.3,
    this.builder,
    this.paragraphIndent,
    this.newlinesForBreak = 1,
    this.indentFirstParagraph = false,
  });

  final String text;

  final double fontSize;

  final ScriptFontFamily? fontFamily;

  final double lineHeight;

  final ScriptWidget Function(List<ScriptWidget>)? builder;

  final double? paragraphIndent;

  final int newlinesForBreak;

  final bool indentFirstParagraph;
}

class ScriptImage extends ScriptWidget {
  const ScriptImage._(this._source, {this.width, this.height});

  factory ScriptImage.memory(Uint8List bytes, {double? width, double? height}) {
    return ScriptImage._(ScriptMemoryImageSource(bytes), width: width, height: height);
  }

  factory ScriptImage.file(String path, {double? width, double? height}) {
    return ScriptImage._(ScriptFileImageSource(path), width: width, height: height);
  }

  final ScriptImageSource _source;

  final double? width;

  final double? height;
}

sealed class ScriptImageSource {
  const ScriptImageSource();
}

class ScriptIntrinsicColumnWidth extends ScriptTableColumnWidth {
  const ScriptIntrinsicColumnWidth({this.flex = 1.0});

  final double flex;
}

class ScriptKeepTogether extends ScriptWidget {
  const ScriptKeepTogether({required this.first, required this.second});

  final ScriptWidget first;

  final ScriptWidget second;
}

class ScriptLineBreakConfiguration extends ScriptWidget {
  const ScriptLineBreakConfiguration({required this.mode, required this.child});

  final ScriptLineBreakMode mode;

  final ScriptWidget child;
}

class ScriptMemoryImageSource extends ScriptImageSource {
  const ScriptMemoryImageSource(this.bytes);

  final Uint8List bytes;
}

class ScriptMetadataMarker extends ScriptWidget {
  const ScriptMetadataMarker({required this.key, required this.value, required this.child});

  final String key;

  final dynamic value;

  final ScriptWidget child;
}

class ScriptMetadataRecord {
  ScriptMetadataRecord({required this.key, required this.value, this.pageNumber});

  final String key;

  final dynamic value;

  int? pageNumber;

  String formattedPageNumber = "";
}

class ScriptMultiColumn extends ScriptWidget {
  const ScriptMultiColumn({this.columnCount = 2, this.columnSpacing = 10.0, this.children = const []});

  final int columnCount;

  final double columnSpacing;

  final List<ScriptWidget> children;
}

class ScriptMultiColumnFlow extends ScriptWidget {
  const ScriptMultiColumnFlow({this.columnCount = 2, this.columnSpacing = 10.0, this.children = const []});

  final int columnCount;

  final double columnSpacing;

  final List<ScriptWidget> children;
}

class ScriptPadding extends ScriptWidget {
  const ScriptPadding({required this.padding, required this.child});

  final ScriptEdgeInsets padding;

  final ScriptWidget child;
}

class ScriptPageContext {
  const ScriptPageContext({
    required this.pageNumber,
    required this.totalPages,
    required this.formattedPageNumber,
    required this.formattedTotalPages,
    required this.sectionPageCount,
  });

  final int pageNumber;

  final int totalPages;

  final String formattedPageNumber;

  final String formattedTotalPages;

  final int sectionPageCount;
}

class ScriptPageFormat {
  const ScriptPageFormat(this.width, this.height);

  static const double point = 1.0;

  static const double inch = 72.0;

  static const double cm = 28.346456692913385;

  static const double mm = 2.834645669291339;

  static const double dp = 0.48;

  static const ScriptPageFormat a3 = ScriptPageFormat(841.8897637795275, 1190.551181102362);

  static const ScriptPageFormat a4 = ScriptPageFormat(595.275590551181, 841.8897637795275);

  static const ScriptPageFormat a5 = ScriptPageFormat(419.5275590551181, 595.275590551181);

  static const ScriptPageFormat a6 = ScriptPageFormat(297.6377952755906, 419.52755905511816);

  static const ScriptPageFormat letter = ScriptPageFormat(612.0, 792.0);

  static const ScriptPageFormat legal = ScriptPageFormat(612.0, 1008.0);

  static const ScriptPageFormat standard = a4;

  final double width;

  final double height;
}

class ScriptPageLayout extends ScriptWidget {
  const ScriptPageLayout({this.header, this.footer, this.body = const [], this.footnoteBuilder});

  final ScriptPageSection? header;

  final ScriptPageSection? footer;

  final List<ScriptWidget> body;

  final ScriptWidget Function(List<ScriptFootnoteItem>)? footnoteBuilder;
}

class ScriptPageNumberSettings {
  const ScriptPageNumberSettings({this.style = ScriptPageNumberStyle.arabic, this.startAt = 1});

  final ScriptPageNumberStyle style;

  final int startAt;
}

class ScriptPageSection {
  ScriptPageSection.fixed({required this.height, required this.builder}) : prototype = null;

  ScriptPageSection.prototyped({required this.prototype, required this.builder}) : height = null;

  final double? height;

  final ScriptWidget? prototype;

  final ScriptWidget Function(ScriptPageContext) builder;
}

class ScriptRepeater extends ScriptWidget {
  const ScriptRepeater(this.text, {this.fontSize = 12.0, this.font, this.lineHeight = 1.3});

  final String text;

  final double fontSize;

  final ScriptFont? font;

  final double lineHeight;
}

class ScriptResetPageNumber extends ScriptWidget {
  const ScriptResetPageNumber({this.style = ScriptPageNumberStyle.arabic, this.startAt = 1});

  final ScriptPageNumberStyle style;

  final int startAt;
}

class ScriptRichText extends ScriptWidget {
  const ScriptRichText({required this.children, this.fontSize = 12.0, this.font, this.lineHeight = 1.3});

  final List<ScriptTextSpan> children;

  final double fontSize;

  final ScriptFont? font;

  final double lineHeight;
}

class ScriptRow extends ScriptWidget {
  const ScriptRow({this.children = const []});

  final List<ScriptWidget> children;
}

class ScriptSize {
  const ScriptSize(this.width, this.height);

  static const ScriptSize zero = ScriptSize(0.0, 0.0);

  final double width;

  final double height;
}

class ScriptSizedBox extends ScriptWidget {
  const ScriptSizedBox({this.width, this.height, this.child});

  const ScriptSizedBox.shrink() : width = 0.0, height = 0.0, child = null;

  final double? width;

  final double? height;

  final ScriptWidget? child;
}

class ScriptSyncedColumns extends ScriptWidget {
  const ScriptSyncedColumns({
    this.topChildren = const [],
    this.topColumnCount = 2,
    this.topColumnSpacing = 10.0,
    this.bottomChildren = const [],
    this.bottomColumnCount = 2,
    this.bottomColumnSpacing = 10.0,
    this.spacing = 20.0,
  });

  final List<ScriptWidget> topChildren;

  final int topColumnCount;

  final double topColumnSpacing;

  final List<ScriptWidget> bottomChildren;

  final int bottomColumnCount;

  final double bottomColumnSpacing;

  final double spacing;
}

class ScriptTable extends ScriptWidget {
  const ScriptTable({
    this.children = const [],
    this.columnWidths = const {},
    this.defaultVerticalAlignment = ScriptTableCellVerticalAlignment.top,
  });

  final List<ScriptTableRow> children;

  final Map<int, ScriptTableColumnWidth> columnWidths;

  final ScriptTableCellVerticalAlignment defaultVerticalAlignment;
}

class ScriptTableCell extends ScriptWidget {
  const ScriptTableCell({
    required this.child,
    this.rowSpan = 1,
    this.colSpan = 1,
    this.verticalAlignment = ScriptTableCellVerticalAlignment.top,
  });

  final ScriptWidget child;

  final int rowSpan;

  final int colSpan;

  final ScriptTableCellVerticalAlignment verticalAlignment;
}

abstract class ScriptTableColumnWidth {
  const ScriptTableColumnWidth();
}

class ScriptTableRow {
  const ScriptTableRow({this.children = const []});

  final List<ScriptTableCell> children;
}

class ScriptText extends ScriptWidget {
  const ScriptText(this.text, {this.style = const ScriptTextStyle(), this.fontSize, this.font, this.lineHeight = 1.3});

  final String text;

  final ScriptTextStyle style;

  final double? fontSize;

  final ScriptFont? font;

  final double lineHeight;
}

class ScriptTextSpan {
  ScriptTextSpan(this.text, {ScriptTextStyle? style, this.metadata}) : style = style ?? ScriptTextStyle.normal;

  final String text;

  final ScriptTextStyle style;

  final List<ScriptMetadataRecord>? metadata;
}

class ScriptTextStyle {
  const ScriptTextStyle({
    this.fontSize,
    this.fontFamily,
    this.fontWeight,
    this.fontStyle,
    this.yOffsetFactor,
    this.decoration,
    this.decorationColor,
    this.decorationThickness,
    this.leftPadding,
    this.textColor,
  });

  ScriptTextStyle.fromFont({
    ScriptFont? font,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.yOffsetFactor,
    this.decoration,
    this.decorationColor,
    this.decorationThickness,
    this.leftPadding,
    this.textColor,
  }) : fontFamily = font != null ? ScriptFontFamily.fromFont(font) : ScriptFontFamily.fromFont(ScriptFont.helvetica);

  static const ScriptTextStyle normal = ScriptTextStyle(
    fontSize: 12.0,
    fontFamily: null,
    fontWeight: ScriptFontWeight.normal,
    fontStyle: ScriptFontStyle.normal,
    yOffsetFactor: 0.0,
    decoration: ScriptTextDecoration.none,
    leftPadding: 0.0,
  );

  static const ScriptTextStyle large = ScriptTextStyle(fontSize: 14.0);

  static const ScriptTextStyle superscript = ScriptTextStyle(fontSize: 8.0, yOffsetFactor: 0.4);

  final double? fontSize;

  final ScriptFontFamily? fontFamily;

  final ScriptFontWeight? fontWeight;

  final ScriptFontStyle? fontStyle;

  final double? yOffsetFactor;

  final ScriptTextDecoration? decoration;

  final ScriptColor? decorationColor;

  final double? decorationThickness;

  final double? leftPadding;

  final ScriptColor? textColor;

  ScriptTextStyle merge(ScriptTextStyle? other) {
    if (other == null) return this;
    return ScriptTextStyle(
      fontSize: other.fontSize ?? fontSize,
      fontFamily: other.fontFamily ?? fontFamily,
      fontWeight: other.fontWeight ?? fontWeight,
      fontStyle: other.fontStyle ?? fontStyle,
      yOffsetFactor: other.yOffsetFactor ?? yOffsetFactor,
      decoration: other.decoration ?? decoration,
      decorationColor: other.decorationColor ?? decorationColor,
      decorationThickness: other.decorationThickness ?? decorationThickness,
      leftPadding: other.leftPadding ?? leftPadding,
      textColor: other.textColor ?? textColor,
    );
  }
}

class ScriptTtfFont extends ScriptFont {
  const ScriptTtfFont(this.path);

  final String path;
}

class ScriptUnderline extends ScriptWidget {
  const ScriptUnderline({required this.child, this.color = ScriptColor.black, this.thickness = 1.0});

  final ScriptWidget child;

  final ScriptColor color;

  final double thickness;
}

abstract class ScriptWidget {
  const ScriptWidget();
}

class ScriptBuiltInFont extends ScriptFont {
  const ScriptBuiltInFont(this.name);

  final ScriptBuiltInFontName name;
}
