// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by tool/generate_reconstructor.dart

// ignore_for_file: unused_element

part of 'package:typesetting_prototype/eval/reconstruct_document.dart';

final reconstructorMap = <String, Widget Function(Runtime, $Instance)>{
  'ScriptAlign': _reconstructAlign,
  'ScriptColumn': _reconstructColumn,
  'ScriptDecoratedBox': _reconstructDecoratedBox,
  'ScriptExpanded': _reconstructExpanded,
  'ScriptFlow': _reconstructFlow,
  'ScriptFlowFill': _reconstructFlowFill,
  'ScriptFormattedText': _reconstructFormattedText,
  'ScriptImage': _reconstructImage,
  'ScriptKeepTogether': _reconstructKeepTogether,
  'ScriptLineBreakConfiguration': _reconstructLineBreakConfiguration,
  'ScriptMetadataMarker': _reconstructMetadataMarker,
  'ScriptMultiColumn': _reconstructMultiColumn,
  'ScriptMultiColumnFlow': _reconstructMultiColumnFlow,
  'ScriptPadding': _reconstructPadding,
  'ScriptPageLayout': _reconstructPageLayout,
  'ScriptRepeater': _reconstructRepeater,
  'ScriptResetPageNumber': _reconstructResetPageNumber,
  'ScriptRichText': _reconstructRichText,
  'ScriptRow': _reconstructRow,
  'ScriptSizedBox': _reconstructSizedBox,
  'ScriptSyncedColumns': _reconstructSyncedColumns,
  'ScriptTable': _reconstructTable,
  'ScriptTableCell': _reconstructTableCell,
  'ScriptText': _reconstructText,
  'ScriptUnderline': _reconstructUnderline,
};
BuiltInFontName _reconstructBuiltInFontName(
  Runtime runtime,
  $Instance instance,
) {
  return BuiltInFontName
      .values[(instance.$getProperty(runtime, 'index') as $int).$value];
}

CrossAxisAlignment _reconstructCrossAxisAlignment(
  Runtime runtime,
  $Instance instance,
) {
  return CrossAxisAlignment
      .values[(instance.$getProperty(runtime, 'index') as $int).$value];
}

FontStyle _reconstructFontStyle(Runtime runtime, $Instance instance) {
  return FontStyle.values[(instance.$getProperty(runtime, 'index') as $int)
      .$value];
}

FontWeight _reconstructFontWeight(Runtime runtime, $Instance instance) {
  return FontWeight.values[(instance.$getProperty(runtime, 'index') as $int)
      .$value];
}

LineBreakMode _reconstructLineBreakMode(Runtime runtime, $Instance instance) {
  return LineBreakMode.values[(instance.$getProperty(runtime, 'index') as $int)
      .$value];
}

MainAxisAlignment _reconstructMainAxisAlignment(
  Runtime runtime,
  $Instance instance,
) {
  return MainAxisAlignment
      .values[(instance.$getProperty(runtime, 'index') as $int).$value];
}

MetadataRetrievalPolicy _reconstructMetadataRetrievalPolicy(
  Runtime runtime,
  $Instance instance,
) {
  return MetadataRetrievalPolicy
      .values[(instance.$getProperty(runtime, 'index') as $int).$value];
}

PageNumberStyle _reconstructPageNumberStyle(
  Runtime runtime,
  $Instance instance,
) {
  return PageNumberStyle
      .values[(instance.$getProperty(runtime, 'index') as $int).$value];
}

TableCellVerticalAlignment _reconstructTableCellVerticalAlignment(
  Runtime runtime,
  $Instance instance,
) {
  return TableCellVerticalAlignment
      .values[(instance.$getProperty(runtime, 'index') as $int).$value];
}

TextDecoration _reconstructTextDecoration(Runtime runtime, $Instance instance) {
  return TextDecoration.values[(instance.$getProperty(runtime, 'index') as $int)
      .$value];
}

Align _reconstructAlign(Runtime runtime, $Instance instance) {
  final alignmentValue = instance.$getProperty(runtime, 'alignment');
  final alignment = _reconstructAlignment(runtime, alignmentValue as $Instance);
  final childValue = instance.$getProperty(runtime, 'child');
  final child = _reconstructWidget(runtime, childValue as $Instance);
  return Align(alignment: alignment, child: child);
}

Alignment _reconstructAlignment(Runtime runtime, $Instance instance) {
  final xValue = instance.$getProperty(runtime, 'x');
  final x = (xValue as $num).$value.toDouble();
  final yValue = instance.$getProperty(runtime, 'y');
  final y = (yValue as $num).$value.toDouble();
  return Alignment(x, y);
}

Border _reconstructBorder(Runtime runtime, $Instance instance) {
  final topValue = instance.$getProperty(runtime, 'top');
  final top = _reconstructBorderSide(runtime, topValue as $Instance);
  final leftValue = instance.$getProperty(runtime, 'left');
  final left = _reconstructBorderSide(runtime, leftValue as $Instance);
  final rightValue = instance.$getProperty(runtime, 'right');
  final right = _reconstructBorderSide(runtime, rightValue as $Instance);
  final bottomValue = instance.$getProperty(runtime, 'bottom');
  final bottom = _reconstructBorderSide(runtime, bottomValue as $Instance);
  return Border(top: top, left: left, right: right, bottom: bottom);
}

BorderSide _reconstructBorderSide(Runtime runtime, $Instance instance) {
  final colorValue = instance.$getProperty(runtime, 'color');
  final color = _reconstructColor(runtime, colorValue as $Instance);
  final widthValue = instance.$getProperty(runtime, 'width');
  final width = (widthValue as $num).$value.toDouble();
  return BorderSide(color: color, width: width);
}

BoxDecoration _reconstructBoxDecoration(Runtime runtime, $Instance instance) {
  final borderValue = instance.$getProperty(runtime, 'border');
  final border = borderValue == $null()
      ? null
      : (_reconstructBorder(runtime, borderValue as $Instance));
  return BoxDecoration(border: border);
}

Color _reconstructColor(Runtime runtime, $Instance instance) {
  final valueValue = instance.$getProperty(runtime, 'value');
  final value = (valueValue as $int).$value;
  return Color(value);
}

Column _reconstructColumn(Runtime runtime, $Instance instance) {
  final childrenValue = instance.$getProperty(runtime, 'children');
  final children = (childrenValue as $List).$value
      .map((e) => _reconstructWidget(runtime, e as $Instance))
      .toList()
      .cast<Widget>();
  final crossAxisAlignmentValue = instance.$getProperty(
    runtime,
    'crossAxisAlignment',
  );
  final crossAxisAlignment = _reconstructCrossAxisAlignment(
    runtime,
    crossAxisAlignmentValue as $Instance,
  );
  final mainAxisAlignmentValue = instance.$getProperty(
    runtime,
    'mainAxisAlignment',
  );
  final mainAxisAlignment = _reconstructMainAxisAlignment(
    runtime,
    mainAxisAlignmentValue as $Instance,
  );
  return Column(
    children: children,
    crossAxisAlignment: crossAxisAlignment,
    mainAxisAlignment: mainAxisAlignment,
  );
}

DecoratedBox _reconstructDecoratedBox(Runtime runtime, $Instance instance) {
  final decorationValue = instance.$getProperty(runtime, 'decoration');
  final decoration = _reconstructBoxDecoration(
    runtime,
    decorationValue as $Instance,
  );
  final childValue = instance.$getProperty(runtime, 'child');
  final child = _reconstructWidget(runtime, childValue as $Instance);
  return DecoratedBox(decoration: decoration, child: child);
}

DocumentMetadataRegistry _reconstructDocumentMetadataRegistry(
  Runtime runtime,
  $Instance instance,
) {
  return DocumentMetadataRegistry();
}

EdgeInsets _reconstructEdgeInsets(Runtime runtime, $Instance instance) {
  final leftValue = instance.$getProperty(runtime, 'left');
  final left = (leftValue as $num).$value.toDouble();
  final topValue = instance.$getProperty(runtime, 'top');
  final top = (topValue as $num).$value.toDouble();
  final rightValue = instance.$getProperty(runtime, 'right');
  final right = (rightValue as $num).$value.toDouble();
  final bottomValue = instance.$getProperty(runtime, 'bottom');
  final bottom = (bottomValue as $num).$value.toDouble();
  return EdgeInsets.fromLTRB(left, top, right, bottom);
}

Expanded _reconstructExpanded(Runtime runtime, $Instance instance) {
  final childValue = instance.$getProperty(runtime, 'child');
  final child = _reconstructWidget(runtime, childValue as $Instance);
  final flexValue = instance.$getProperty(runtime, 'flex');
  final flex = (flexValue as $int).$value;
  return Expanded(child: child, flex: flex);
}

FileImageSource _reconstructFileImageSource(
  Runtime runtime,
  $Instance instance,
) {
  final pathValue = instance.$getProperty(runtime, 'path');
  final path = (pathValue as $String).$value;
  return FileImageSource(path);
}

FixedColumnWidth _reconstructFixedColumnWidth(
  Runtime runtime,
  $Instance instance,
) {
  final widthValue = instance.$getProperty(runtime, 'width');
  final width = (widthValue as $num).$value.toDouble();
  return FixedColumnWidth(width);
}

FlexColumnWidth _reconstructFlexColumnWidth(
  Runtime runtime,
  $Instance instance,
) {
  final flexValue = instance.$getProperty(runtime, 'flex');
  final flex = (flexValue as $num).$value.toDouble();
  return FlexColumnWidth(flex);
}

Flow _reconstructFlow(Runtime runtime, $Instance instance) {
  final childrenValue = instance.$getProperty(runtime, 'children');
  final children = (childrenValue as $List).$value
      .map((e) => _reconstructWidget(runtime, e as $Instance))
      .toList()
      .cast<Widget>();
  return Flow(children: children);
}

FlowFill _reconstructFlowFill(Runtime runtime, $Instance instance) {
  final childValue = instance.$getProperty(runtime, 'child');
  final child = _reconstructWidget(runtime, childValue as $Instance);
  return FlowFill(child: child);
}

FontFamily _reconstructFontFamily(Runtime runtime, $Instance instance) {
  final regularValue = instance.$getProperty(runtime, 'regular');
  final regular = _reconstructFont(runtime, regularValue as $Instance);
  final boldValue = instance.$getProperty(runtime, 'bold');
  final bold = _reconstructFont(runtime, boldValue as $Instance);
  final italicValue = instance.$getProperty(runtime, 'italic');
  final italic = _reconstructFont(runtime, italicValue as $Instance);
  final boldItalicValue = instance.$getProperty(runtime, 'boldItalic');
  final boldItalic = _reconstructFont(runtime, boldItalicValue as $Instance);
  return FontFamily(
    regular: regular,
    bold: bold,
    italic: italic,
    boldItalic: boldItalic,
  );
}

FootnoteItem _reconstructFootnoteItem(Runtime runtime, $Instance instance) {
  final footnoteNumberValue = instance.$getProperty(runtime, 'footnoteNumber');
  final footnoteNumber = (footnoteNumberValue as $int).$value;
  final contentValue = instance.$getProperty(runtime, 'content');
  final content = (contentValue as $String).$value;
  return FootnoteItem(footnoteNumber: footnoteNumber, content: content);
}

FootnoteLayoutInfo _reconstructFootnoteLayoutInfo(
  Runtime runtime,
  $Instance instance,
) {
  final contentValue = instance.$getProperty(runtime, 'content');
  final content = (contentValue as $String).$value;
  final positionValue = instance.$getProperty(runtime, 'position');
  final position = (positionValue as $num).$value.toDouble();
  final numberValue = instance.$getProperty(runtime, 'number');
  final number = (numberValue as $int).$value;
  return FootnoteLayoutInfo(
    content: content,
    position: position,
    number: number,
  );
}

FormattedText _reconstructFormattedText(Runtime runtime, $Instance instance) {
  final textValue = instance.$getProperty(runtime, 'text');
  final text = (textValue as $String).$value;
  final fontSizeValue = instance.$getProperty(runtime, 'fontSize');
  final fontSize = (fontSizeValue as $num).$value.toDouble();
  final fontFamilyValue = instance.$getProperty(runtime, 'fontFamily');
  final fontFamily = fontFamilyValue == $null()
      ? null
      : (_reconstructFontFamily(runtime, fontFamilyValue as $Instance));
  final lineHeightValue = instance.$getProperty(runtime, 'lineHeight');
  final lineHeight = (lineHeightValue as $num).$value.toDouble();
  final builderValue = instance.$getProperty(runtime, 'builder');
  final builder = builderValue == $null() ? null : (builderValue?.$reified);
  final paragraphIndentValue = instance.$getProperty(
    runtime,
    'paragraphIndent',
  );
  final paragraphIndent = paragraphIndentValue == $null()
      ? null
      : ((paragraphIndentValue as $num).$value.toDouble());
  final newlinesForBreakValue = instance.$getProperty(
    runtime,
    'newlinesForBreak',
  );
  final newlinesForBreak = (newlinesForBreakValue as $int).$value;
  final indentFirstParagraphValue = instance.$getProperty(
    runtime,
    'indentFirstParagraph',
  );
  final indentFirstParagraph = (indentFirstParagraphValue as $bool).$value;
  return FormattedText(
    text,
    fontSize: fontSize,
    fontFamily: fontFamily,
    lineHeight: lineHeight,
    builder: builder,
    paragraphIndent: paragraphIndent,
    newlinesForBreak: newlinesForBreak,
    indentFirstParagraph: indentFirstParagraph,
  );
}

Image _reconstructImage(Runtime runtime, $Instance instance) {
  final bytesValue = instance.$getProperty(runtime, 'bytes');
  final bytes = Uint8List.fromList(
    (bytesValue as $List).$value.map((e) => (e as $int).$value).toList(),
  );
  final widthValue = instance.$getProperty(runtime, 'width');
  final width = widthValue == $null()
      ? null
      : ((widthValue as $num).$value.toDouble());
  final heightValue = instance.$getProperty(runtime, 'height');
  final height = heightValue == $null()
      ? null
      : ((heightValue as $num).$value.toDouble());
  return Image.memory(bytes, width: width, height: height);
}

IntrinsicColumnWidth _reconstructIntrinsicColumnWidth(
  Runtime runtime,
  $Instance instance,
) {
  final flexValue = instance.$getProperty(runtime, 'flex');
  final flex = (flexValue as $num).$value.toDouble();
  return IntrinsicColumnWidth(flex: flex);
}

KeepTogether _reconstructKeepTogether(Runtime runtime, $Instance instance) {
  final firstValue = instance.$getProperty(runtime, 'first');
  final first = _reconstructWidget(runtime, firstValue as $Instance);
  final secondValue = instance.$getProperty(runtime, 'second');
  final second = _reconstructWidget(runtime, secondValue as $Instance);
  return KeepTogether(first: first, second: second);
}

LineBreakConfiguration _reconstructLineBreakConfiguration(
  Runtime runtime,
  $Instance instance,
) {
  final modeValue = instance.$getProperty(runtime, 'mode');
  final mode = _reconstructLineBreakMode(runtime, modeValue as $Instance);
  final childValue = instance.$getProperty(runtime, 'child');
  final child = _reconstructWidget(runtime, childValue as $Instance);
  return LineBreakConfiguration(mode: mode, child: child);
}

MemoryImageSource _reconstructMemoryImageSource(
  Runtime runtime,
  $Instance instance,
) {
  final bytesValue = instance.$getProperty(runtime, 'bytes');
  final bytes = Uint8List.fromList(
    (bytesValue as $List).$value.map((e) => (e as $int).$value).toList(),
  );
  return MemoryImageSource(bytes);
}

MetadataRecord _reconstructMetadataRecord(Runtime runtime, $Instance instance) {
  final keyValue = instance.$getProperty(runtime, 'key');
  final key = (keyValue as $String).$value;
  final valueValue = instance.$getProperty(runtime, 'value');
  final value = valueValue?.$reified;
  final pageNumberValue = instance.$getProperty(runtime, 'pageNumber');
  final pageNumber = pageNumberValue == $null()
      ? null
      : ((pageNumberValue as $int).$value);
  return MetadataRecord(key: key, value: value, pageNumber: pageNumber);
}

MultiColumn _reconstructMultiColumn(Runtime runtime, $Instance instance) {
  final columnCountValue = instance.$getProperty(runtime, 'columnCount');
  final columnCount = (columnCountValue as $int).$value;
  final columnSpacingValue = instance.$getProperty(runtime, 'columnSpacing');
  final columnSpacing = (columnSpacingValue as $num).$value.toDouble();
  final childrenValue = instance.$getProperty(runtime, 'children');
  final children = (childrenValue as $List).$value
      .map((e) => _reconstructWidget(runtime, e as $Instance))
      .toList()
      .cast<Widget>();
  return MultiColumn(
    columnCount: columnCount,
    columnSpacing: columnSpacing,
    children: children,
  );
}

MultiColumnFlow _reconstructMultiColumnFlow(
  Runtime runtime,
  $Instance instance,
) {
  final columnCountValue = instance.$getProperty(runtime, 'columnCount');
  final columnCount = (columnCountValue as $int).$value;
  final columnSpacingValue = instance.$getProperty(runtime, 'columnSpacing');
  final columnSpacing = (columnSpacingValue as $num).$value.toDouble();
  final childrenValue = instance.$getProperty(runtime, 'children');
  final children = (childrenValue as $List).$value
      .map((e) => _reconstructWidget(runtime, e as $Instance))
      .toList()
      .cast<Widget>();
  return MultiColumnFlow(
    columnCount: columnCount,
    columnSpacing: columnSpacing,
    children: children,
  );
}

Padding _reconstructPadding(Runtime runtime, $Instance instance) {
  final paddingValue = instance.$getProperty(runtime, 'padding');
  final padding = _reconstructEdgeInsets(runtime, paddingValue as $Instance);
  final childValue = instance.$getProperty(runtime, 'child');
  final child = _reconstructWidget(runtime, childValue as $Instance);
  return Padding(padding: padding, child: child);
}

PageContext _reconstructPageContext(Runtime runtime, $Instance instance) {
  final pageNumberValue = instance.$getProperty(runtime, 'pageNumber');
  final pageNumber = (pageNumberValue as $int).$value;
  final totalPagesValue = instance.$getProperty(runtime, 'totalPages');
  final totalPages = (totalPagesValue as $int).$value;
  final formattedPageNumberValue = instance.$getProperty(
    runtime,
    'formattedPageNumber',
  );
  final formattedPageNumber = (formattedPageNumberValue as $String).$value;
  final formattedTotalPagesValue = instance.$getProperty(
    runtime,
    'formattedTotalPages',
  );
  final formattedTotalPages = (formattedTotalPagesValue as $String).$value;
  final sectionPageCountValue = instance.$getProperty(
    runtime,
    'sectionPageCount',
  );
  final sectionPageCount = (sectionPageCountValue as $int).$value;
  final settingsValue = instance.$getProperty(runtime, 'settings');
  final settings = _reconstructPageNumberSettings(
    runtime,
    settingsValue as $Instance,
  );
  final metadataValue = instance.$getProperty(runtime, 'metadata');
  final metadata = (metadataValue as $List).$value
      .map((e) => _reconstructMetadataRecord(runtime, e as $Instance))
      .toList()
      .cast<MetadataRecord>();
  return PageContext(
    pageNumber: pageNumber,
    totalPages: totalPages,
    formattedPageNumber: formattedPageNumber,
    formattedTotalPages: formattedTotalPages,
    sectionPageCount: sectionPageCount,
    settings: settings,
    metadata: metadata,
  );
}

PageFormat _reconstructPageFormat(Runtime runtime, $Instance instance) {
  final widthValue = instance.$getProperty(runtime, 'width');
  final width = (widthValue as $num).$value.toDouble();
  final heightValue = instance.$getProperty(runtime, 'height');
  final height = (heightValue as $num).$value.toDouble();
  return PageFormat(width, height);
}

PageNumberSettings _reconstructPageNumberSettings(
  Runtime runtime,
  $Instance instance,
) {
  final styleValue = instance.$getProperty(runtime, 'style');
  final style = _reconstructPageNumberStyle(runtime, styleValue as $Instance);
  final startAtValue = instance.$getProperty(runtime, 'startAt');
  final startAt = (startAtValue as $int).$value;
  return PageNumberSettings(style: style, startAt: startAt);
}

Repeater _reconstructRepeater(Runtime runtime, $Instance instance) {
  final textValue = instance.$getProperty(runtime, 'text');
  final text = (textValue as $String).$value;
  final fontSizeValue = instance.$getProperty(runtime, 'fontSize');
  final fontSize = (fontSizeValue as $num).$value.toDouble();
  final fontValue = instance.$getProperty(runtime, 'font');
  final font = fontValue == $null()
      ? null
      : (_reconstructFont(runtime, fontValue as $Instance));
  final lineHeightValue = instance.$getProperty(runtime, 'lineHeight');
  final lineHeight = (lineHeightValue as $num).$value.toDouble();
  return Repeater(text, fontSize: fontSize, font: font, lineHeight: lineHeight);
}

ResetPageNumber _reconstructResetPageNumber(
  Runtime runtime,
  $Instance instance,
) {
  final styleValue = instance.$getProperty(runtime, 'style');
  final style = _reconstructPageNumberStyle(runtime, styleValue as $Instance);
  final startAtValue = instance.$getProperty(runtime, 'startAt');
  final startAt = (startAtValue as $int).$value;
  return ResetPageNumber(style: style, startAt: startAt);
}

RichText _reconstructRichText(Runtime runtime, $Instance instance) {
  final childrenValue = instance.$getProperty(runtime, 'children');
  final children = (childrenValue as $List).$value
      .map((e) => _reconstructTextSpan(runtime, e as $Instance))
      .toList()
      .cast<TextSpan>();
  final fontSizeValue = instance.$getProperty(runtime, 'fontSize');
  final fontSize = (fontSizeValue as $num).$value.toDouble();
  final fontValue = instance.$getProperty(runtime, 'font');
  final font = fontValue == $null()
      ? null
      : (_reconstructFont(runtime, fontValue as $Instance));
  final lineHeightValue = instance.$getProperty(runtime, 'lineHeight');
  final lineHeight = (lineHeightValue as $num).$value.toDouble();
  return RichText(
    children: children,
    fontSize: fontSize,
    font: font,
    lineHeight: lineHeight,
  );
}

Row _reconstructRow(Runtime runtime, $Instance instance) {
  final childrenValue = instance.$getProperty(runtime, 'children');
  final children = (childrenValue as $List).$value
      .map((e) => _reconstructWidget(runtime, e as $Instance))
      .toList()
      .cast<Widget>();
  return Row(children: children);
}

Size _reconstructSize(Runtime runtime, $Instance instance) {
  final widthValue = instance.$getProperty(runtime, 'width');
  final width = (widthValue as $num).$value.toDouble();
  final heightValue = instance.$getProperty(runtime, 'height');
  final height = (heightValue as $num).$value.toDouble();
  return Size(width, height);
}

SizedBox _reconstructSizedBox(Runtime runtime, $Instance instance) {
  final widthValue = instance.$getProperty(runtime, 'width');
  final width = widthValue == $null()
      ? null
      : ((widthValue as $num).$value.toDouble());
  final heightValue = instance.$getProperty(runtime, 'height');
  final height = heightValue == $null()
      ? null
      : ((heightValue as $num).$value.toDouble());
  final childValue = instance.$getProperty(runtime, 'child');
  final child = childValue == $null()
      ? null
      : (_reconstructWidget(runtime, childValue as $Instance));
  return SizedBox(width: width, height: height, child: child);
}

SyncedColumns _reconstructSyncedColumns(Runtime runtime, $Instance instance) {
  final topChildrenValue = instance.$getProperty(runtime, 'topChildren');
  final topChildren = (topChildrenValue as $List).$value
      .map((e) => _reconstructWidget(runtime, e as $Instance))
      .toList()
      .cast<Widget>();
  final topColumnCountValue = instance.$getProperty(runtime, 'topColumnCount');
  final topColumnCount = (topColumnCountValue as $int).$value;
  final topColumnSpacingValue = instance.$getProperty(
    runtime,
    'topColumnSpacing',
  );
  final topColumnSpacing = (topColumnSpacingValue as $num).$value.toDouble();
  final bottomChildrenValue = instance.$getProperty(runtime, 'bottomChildren');
  final bottomChildren = (bottomChildrenValue as $List).$value
      .map((e) => _reconstructWidget(runtime, e as $Instance))
      .toList()
      .cast<Widget>();
  final bottomColumnCountValue = instance.$getProperty(
    runtime,
    'bottomColumnCount',
  );
  final bottomColumnCount = (bottomColumnCountValue as $int).$value;
  final bottomColumnSpacingValue = instance.$getProperty(
    runtime,
    'bottomColumnSpacing',
  );
  final bottomColumnSpacing = (bottomColumnSpacingValue as $num).$value
      .toDouble();
  final spacingValue = instance.$getProperty(runtime, 'spacing');
  final spacing = (spacingValue as $num).$value.toDouble();
  return SyncedColumns(
    topChildren: topChildren,
    topColumnCount: topColumnCount,
    topColumnSpacing: topColumnSpacing,
    bottomChildren: bottomChildren,
    bottomColumnCount: bottomColumnCount,
    bottomColumnSpacing: bottomColumnSpacing,
    spacing: spacing,
  );
}

Table _reconstructTable(Runtime runtime, $Instance instance) {
  final childrenValue = instance.$getProperty(runtime, 'children');
  final children = (childrenValue as $List).$value
      .map((e) => _reconstructTableRow(runtime, e as $Instance))
      .toList()
      .cast<TableRow>();
  final columnWidthsValue = instance.$getProperty(runtime, 'columnWidths');
  final columnWidths = (columnWidthsValue as $Map).$value
      .map(
        (k, v) => MapEntry(
          (k as $int).$value,
          _reconstructTableColumnWidth(runtime, v as $Instance),
        ),
      )
      .cast<int, TableColumnWidth>();
  final defaultVerticalAlignmentValue = instance.$getProperty(
    runtime,
    'defaultVerticalAlignment',
  );
  final defaultVerticalAlignment = _reconstructTableCellVerticalAlignment(
    runtime,
    defaultVerticalAlignmentValue as $Instance,
  );
  return Table(
    children: children,
    columnWidths: columnWidths,
    defaultVerticalAlignment: defaultVerticalAlignment,
  );
}

TableCell _reconstructTableCell(Runtime runtime, $Instance instance) {
  final childValue = instance.$getProperty(runtime, 'child');
  final child = _reconstructWidget(runtime, childValue as $Instance);
  final rowSpanValue = instance.$getProperty(runtime, 'rowSpan');
  final rowSpan = (rowSpanValue as $int).$value;
  final colSpanValue = instance.$getProperty(runtime, 'colSpan');
  final colSpan = (colSpanValue as $int).$value;
  final verticalAlignmentValue = instance.$getProperty(
    runtime,
    'verticalAlignment',
  );
  final verticalAlignment = _reconstructTableCellVerticalAlignment(
    runtime,
    verticalAlignmentValue as $Instance,
  );
  return TableCell(
    child: child,
    rowSpan: rowSpan,
    colSpan: colSpan,
    verticalAlignment: verticalAlignment,
  );
}

TableRow _reconstructTableRow(Runtime runtime, $Instance instance) {
  final childrenValue = instance.$getProperty(runtime, 'children');
  final children = (childrenValue as $List).$value
      .map((e) => _reconstructTableCell(runtime, e as $Instance))
      .toList()
      .cast<TableCell>();
  return TableRow(children: children);
}

Text _reconstructText(Runtime runtime, $Instance instance) {
  final textValue = instance.$getProperty(runtime, 'text');
  final text = (textValue as $String).$value;
  final styleValue = instance.$getProperty(runtime, 'style');
  final style = _reconstructTextStyle(runtime, styleValue as $Instance);
  final fontSizeValue = instance.$getProperty(runtime, 'fontSize');
  final fontSize = fontSizeValue == $null()
      ? null
      : ((fontSizeValue as $num).$value.toDouble());
  final fontValue = instance.$getProperty(runtime, 'font');
  final font = fontValue == $null()
      ? null
      : (_reconstructFont(runtime, fontValue as $Instance));
  final lineHeightValue = instance.$getProperty(runtime, 'lineHeight');
  final lineHeight = (lineHeightValue as $num).$value.toDouble();
  return Text(
    text,
    style: style,
    fontSize: fontSize,
    font: font,
    lineHeight: lineHeight,
  );
}

TextSpan _reconstructTextSpan(Runtime runtime, $Instance instance) {
  final textValue = instance.$getProperty(runtime, 'text');
  final text = (textValue as $String).$value;
  final styleValue = instance.$getProperty(runtime, 'style');
  final style = styleValue == $null()
      ? null
      : (_reconstructTextStyle(runtime, styleValue as $Instance));
  final metadataValue = instance.$getProperty(runtime, 'metadata');
  final metadata = metadataValue == $null()
      ? null
      : ((metadataValue as $List).$value
            .map((e) => _reconstructMetadataRecord(runtime, e as $Instance))
            .toList()
            .cast<MetadataRecord>());
  return TextSpan(text, style: style, metadata: metadata);
}

TextStyle _reconstructTextStyle(Runtime runtime, $Instance instance) {
  final fontSizeValue = instance.$getProperty(runtime, 'fontSize');
  final fontSize = fontSizeValue == $null()
      ? null
      : ((fontSizeValue as $num).$value.toDouble());
  final fontFamilyValue = instance.$getProperty(runtime, 'fontFamily');
  final fontFamily = fontFamilyValue == $null()
      ? null
      : (_reconstructFontFamily(runtime, fontFamilyValue as $Instance));
  final fontWeightValue = instance.$getProperty(runtime, 'fontWeight');
  final fontWeight = fontWeightValue == $null()
      ? null
      : (_reconstructFontWeight(runtime, fontWeightValue as $Instance));
  final fontStyleValue = instance.$getProperty(runtime, 'fontStyle');
  final fontStyle = fontStyleValue == $null()
      ? null
      : (_reconstructFontStyle(runtime, fontStyleValue as $Instance));
  final yOffsetFactorValue = instance.$getProperty(runtime, 'yOffsetFactor');
  final yOffsetFactor = yOffsetFactorValue == $null()
      ? null
      : ((yOffsetFactorValue as $num).$value.toDouble());
  final decorationValue = instance.$getProperty(runtime, 'decoration');
  final decoration = decorationValue == $null()
      ? null
      : (_reconstructTextDecoration(runtime, decorationValue as $Instance));
  final decorationColorValue = instance.$getProperty(
    runtime,
    'decorationColor',
  );
  final decorationColor = decorationColorValue == $null()
      ? null
      : (_reconstructColor(runtime, decorationColorValue as $Instance));
  final decorationThicknessValue = instance.$getProperty(
    runtime,
    'decorationThickness',
  );
  final decorationThickness = decorationThicknessValue == $null()
      ? null
      : ((decorationThicknessValue as $num).$value.toDouble());
  final leftPaddingValue = instance.$getProperty(runtime, 'leftPadding');
  final leftPadding = leftPaddingValue == $null()
      ? null
      : ((leftPaddingValue as $num).$value.toDouble());
  final textColorValue = instance.$getProperty(runtime, 'textColor');
  final textColor = textColorValue == $null()
      ? null
      : (_reconstructColor(runtime, textColorValue as $Instance));
  return TextStyle(
    fontSize: fontSize,
    fontFamily: fontFamily,
    fontWeight: fontWeight,
    fontStyle: fontStyle,
    yOffsetFactor: yOffsetFactor,
    decoration: decoration,
    decorationColor: decorationColor,
    decorationThickness: decorationThickness,
    leftPadding: leftPadding,
    textColor: textColor,
  );
}

TtfFont _reconstructTtfFont(Runtime runtime, $Instance instance) {
  final pathValue = instance.$getProperty(runtime, 'path');
  final path = (pathValue as $String).$value;
  return TtfFont(path);
}

Underline _reconstructUnderline(Runtime runtime, $Instance instance) {
  final childValue = instance.$getProperty(runtime, 'child');
  final child = _reconstructWidget(runtime, childValue as $Instance);
  final colorValue = instance.$getProperty(runtime, 'color');
  final color = _reconstructColor(runtime, colorValue as $Instance);
  final thicknessValue = instance.$getProperty(runtime, 'thickness');
  final thickness = (thicknessValue as $num).$value.toDouble();
  return Underline(child: child, color: color, thickness: thickness);
}
