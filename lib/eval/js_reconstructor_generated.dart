// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by tool/generate_js_reconstructor.dart

// ignore_for_file: unused_element, unnecessary_cast

part of 'package:typesetting_prototype/eval/reconstruct_document_js.dart';

BuiltInFontName _reconstructBuiltInFontName(String value) {
  return BuiltInFontName.values.byName(value);
}

CrossAxisAlignment _reconstructCrossAxisAlignment(String value) {
  return CrossAxisAlignment.values.byName(value);
}

FontStyle _reconstructFontStyle(String value) {
  return FontStyle.values.byName(value);
}

FontWeight _reconstructFontWeight(String value) {
  return FontWeight.values.byName(value);
}

LineBreakMode _reconstructLineBreakMode(String value) {
  return LineBreakMode.values.byName(value);
}

MainAxisAlignment _reconstructMainAxisAlignment(String value) {
  return MainAxisAlignment.values.byName(value);
}

MetadataRetrievalPolicy _reconstructMetadataRetrievalPolicy(String value) {
  return MetadataRetrievalPolicy.values.byName(value);
}

PageNumberStyle _reconstructPageNumberStyle(String value) {
  return PageNumberStyle.values.byName(value);
}

TableCellVerticalAlignment _reconstructTableCellVerticalAlignment(
  String value,
) {
  return TableCellVerticalAlignment.values.byName(value);
}

TextDecoration _reconstructTextDecoration(String value) {
  return TextDecoration.values.byName(value);
}

Align _reconstructAlign(JSObject instance) {
  final alignmentJS = getProperty<JSObject>(instance, 'alignment');
  final alignment = _reconstructAlignment(alignmentJS as JSObject);
  final childJS = getProperty<JSObject>(instance, 'child');
  final child = reconstructWidget(childJS as JSObject);
  return Align(alignment: alignment, child: child);
}

Alignment _reconstructAlignment(JSObject instance) {
  final xJS = getProperty<JSNumber>(instance, 'x');
  final x = (xJS as JSNumber).toDartDouble;
  final yJS = getProperty<JSNumber>(instance, 'y');
  final y = (yJS as JSNumber).toDartDouble;
  return Alignment(x, y);
}

Border _reconstructBorder(JSObject instance) {
  final topJS = getProperty<JSObject>(instance, 'top');
  final top = _reconstructBorderSide(topJS as JSObject);
  final leftJS = getProperty<JSObject>(instance, 'left');
  final left = _reconstructBorderSide(leftJS as JSObject);
  final rightJS = getProperty<JSObject>(instance, 'right');
  final right = _reconstructBorderSide(rightJS as JSObject);
  final bottomJS = getProperty<JSObject>(instance, 'bottom');
  final bottom = _reconstructBorderSide(bottomJS as JSObject);
  return Border(top: top, left: left, right: right, bottom: bottom);
}

BorderSide _reconstructBorderSide(JSObject instance) {
  final colorJS = getProperty<JSObject>(instance, 'color');
  final color = _reconstructColor(colorJS as JSObject);
  final widthJS = getProperty<JSNumber>(instance, 'width');
  final width = (widthJS as JSNumber).toDartDouble;
  return BorderSide(color: color, width: width);
}

BoxDecoration _reconstructBoxDecoration(JSObject instance) {
  final borderJS = getProperty<JSObject>(instance, 'border');
  final border = borderJS == null
      ? null
      : _reconstructBorder(borderJS as JSObject);
  return BoxDecoration(border: border);
}

Color _reconstructColor(JSObject instance) {
  final valueJS = getProperty<JSNumber>(instance, 'value');
  final value = (valueJS as JSNumber).toDartInt;
  return Color(value);
}

Column _reconstructColumn(JSObject instance) {
  final childrenJS = getProperty<JSArray>(instance, 'children');
  final children = (childrenJS as JSArray).toDart
      .map((e) => reconstructWidget(e as JSObject))
      .toList();
  final crossAxisAlignmentJS = getProperty<JSString>(
    instance,
    'crossAxisAlignment',
  );
  final crossAxisAlignment = _reconstructCrossAxisAlignment(
    (crossAxisAlignmentJS as JSString).toDart,
  );
  final mainAxisAlignmentJS = getProperty<JSString>(
    instance,
    'mainAxisAlignment',
  );
  final mainAxisAlignment = _reconstructMainAxisAlignment(
    (mainAxisAlignmentJS as JSString).toDart,
  );
  return Column(
    children: children,
    crossAxisAlignment: crossAxisAlignment,
    mainAxisAlignment: mainAxisAlignment,
  );
}

DecoratedBox _reconstructDecoratedBox(JSObject instance) {
  final decorationJS = getProperty<JSObject>(instance, 'decoration');
  final decoration = _reconstructBoxDecoration(decorationJS as JSObject);
  final childJS = getProperty<JSObject>(instance, 'child');
  final child = reconstructWidget(childJS as JSObject);
  return DecoratedBox(decoration: decoration, child: child);
}

DocumentMetadataRegistry _reconstructDocumentMetadataRegistry(
  JSObject instance,
) {
  return DocumentMetadataRegistry();
}

EdgeInsets _reconstructEdgeInsets(JSObject instance) {
  final leftJS = getProperty<JSNumber>(instance, 'left');
  final left = (leftJS as JSNumber).toDartDouble;
  final topJS = getProperty<JSNumber>(instance, 'top');
  final top = (topJS as JSNumber).toDartDouble;
  final rightJS = getProperty<JSNumber>(instance, 'right');
  final right = (rightJS as JSNumber).toDartDouble;
  final bottomJS = getProperty<JSNumber>(instance, 'bottom');
  final bottom = (bottomJS as JSNumber).toDartDouble;
  return EdgeInsets.fromLTRB(left, top, right, bottom);
}

Expanded _reconstructExpanded(JSObject instance) {
  final childJS = getProperty<JSObject>(instance, 'child');
  final child = reconstructWidget(childJS as JSObject);
  final flexJS = getProperty<JSNumber>(instance, 'flex');
  final flex = (flexJS as JSNumber).toDartInt;
  return Expanded(child: child, flex: flex);
}

FileImageSource _reconstructFileImageSource(JSObject instance) {
  final pathJS = getProperty<JSString>(instance, 'path');
  final path = (pathJS as JSString).toDart;
  return FileImageSource(path);
}

FixedColumnWidth _reconstructFixedColumnWidth(JSObject instance) {
  final widthJS = getProperty<JSNumber>(instance, 'width');
  final width = (widthJS as JSNumber).toDartDouble;
  return FixedColumnWidth(width);
}

FlexColumnWidth _reconstructFlexColumnWidth(JSObject instance) {
  final flexJS = getProperty<JSNumber>(instance, 'flex');
  final flex = (flexJS as JSNumber).toDartDouble;
  return FlexColumnWidth(flex);
}

Flow _reconstructFlow(JSObject instance) {
  final childrenJS = getProperty<JSArray>(instance, 'children');
  final children = (childrenJS as JSArray).toDart
      .map((e) => reconstructWidget(e as JSObject))
      .toList();
  return Flow(children: children);
}

FlowFill _reconstructFlowFill(JSObject instance) {
  final childJS = getProperty<JSObject>(instance, 'child');
  final child = reconstructWidget(childJS as JSObject);
  return FlowFill(child: child);
}

FontFamily _reconstructFontFamily(JSObject instance) {
  final regularJS = getProperty<JSObject>(instance, 'regular');
  final regular = reconstructFont(regularJS as JSObject);
  final boldJS = getProperty<JSObject>(instance, 'bold');
  final bold = reconstructFont(boldJS as JSObject);
  final italicJS = getProperty<JSObject>(instance, 'italic');
  final italic = reconstructFont(italicJS as JSObject);
  final boldItalicJS = getProperty<JSObject>(instance, 'boldItalic');
  final boldItalic = reconstructFont(boldItalicJS as JSObject);
  return FontFamily(
    regular: regular,
    bold: bold,
    italic: italic,
    boldItalic: boldItalic,
  );
}

FootnoteItem _reconstructFootnoteItem(JSObject instance) {
  final footnoteNumberJS = getProperty<JSNumber>(instance, 'footnoteNumber');
  final footnoteNumber = (footnoteNumberJS as JSNumber).toDartInt;
  final contentJS = getProperty<JSString>(instance, 'content');
  final content = (contentJS as JSString).toDart;
  return FootnoteItem(footnoteNumber: footnoteNumber, content: content);
}

FootnoteLayoutInfo _reconstructFootnoteLayoutInfo(JSObject instance) {
  final contentJS = getProperty<JSString>(instance, 'content');
  final content = (contentJS as JSString).toDart;
  final positionJS = getProperty<JSNumber>(instance, 'position');
  final position = (positionJS as JSNumber).toDartDouble;
  final numberJS = getProperty<JSNumber>(instance, 'number');
  final number = (numberJS as JSNumber).toDartInt;
  return FootnoteLayoutInfo(
    content: content,
    position: position,
    number: number,
  );
}

FormattedText _reconstructFormattedText(JSObject instance) {
  final textJS = getProperty<JSString>(instance, 'text');
  final text = (textJS as JSString).toDart;
  final fontSizeJS = getProperty<JSNumber>(instance, 'fontSize');
  final fontSize = (fontSizeJS as JSNumber).toDartDouble;
  final fontFamilyJS = getProperty<JSObject>(instance, 'fontFamily');
  final fontFamily = fontFamilyJS == null
      ? null
      : _reconstructFontFamily(fontFamilyJS as JSObject);
  final lineHeightJS = getProperty<JSNumber>(instance, 'lineHeight');
  final lineHeight = (lineHeightJS as JSNumber).toDartDouble;
  final builderJS = getProperty<JSAny>(instance, 'builder');
  final builder = builderJS == null ? null : _convertJSAnyToDart(builderJS);
  final paragraphIndentJS = getProperty<JSNumber>(instance, 'paragraphIndent');
  final paragraphIndent = paragraphIndentJS == null
      ? null
      : (paragraphIndentJS as JSNumber).toDartDouble;
  final newlinesForBreakJS = getProperty<JSNumber>(
    instance,
    'newlinesForBreak',
  );
  final newlinesForBreak = (newlinesForBreakJS as JSNumber).toDartInt;
  final indentFirstParagraphJS = getProperty<JSBoolean>(
    instance,
    'indentFirstParagraph',
  );
  final indentFirstParagraph = (indentFirstParagraphJS as JSBoolean).toDart;
  return FormattedText(
    text,
    fontSize: fontSize,
    fontFamily: fontFamily,
    lineHeight: lineHeight,
    builder: builder,
    paragraphIndent: paragraphIndent,
    newlinesForBreak: newlinesForBreak,
    indentFirstParagraph: indentFirstParagraph,
  );
}

IntrinsicColumnWidth _reconstructIntrinsicColumnWidth(JSObject instance) {
  final flexJS = getProperty<JSNumber>(instance, 'flex');
  final flex = (flexJS as JSNumber).toDartDouble;
  return IntrinsicColumnWidth(flex: flex);
}

KeepTogether _reconstructKeepTogether(JSObject instance) {
  final firstJS = getProperty<JSObject>(instance, 'first');
  final first = reconstructWidget(firstJS as JSObject);
  final secondJS = getProperty<JSObject>(instance, 'second');
  final second = reconstructWidget(secondJS as JSObject);
  return KeepTogether(first: first, second: second);
}

LineBreakConfiguration _reconstructLineBreakConfiguration(JSObject instance) {
  final modeJS = getProperty<JSString>(instance, 'mode');
  final mode = _reconstructLineBreakMode((modeJS as JSString).toDart);
  final childJS = getProperty<JSObject>(instance, 'child');
  final child = reconstructWidget(childJS as JSObject);
  return LineBreakConfiguration(mode: mode, child: child);
}

MemoryImageSource _reconstructMemoryImageSource(JSObject instance) {
  final bytesJS = getProperty<JSObject>(instance, 'bytes');
  final bytes = Uint8List.fromList(
    (bytesJS as JSArray<JSNumber>).toDart.map((e) => e.toDartInt).toList(),
  );
  return MemoryImageSource(bytes);
}

MetadataRecord _reconstructMetadataRecord(JSObject instance) {
  final keyJS = getProperty<JSString>(instance, 'key');
  final key = (keyJS as JSString).toDart;
  final valueJS = getProperty<JSAny>(instance, 'value');
  final value = _convertJSAnyToDart(valueJS);
  final pageNumberJS = getProperty<JSNumber>(instance, 'pageNumber');
  final pageNumber = pageNumberJS == null
      ? null
      : (pageNumberJS as JSNumber).toDartInt;
  return MetadataRecord(key: key, value: value, pageNumber: pageNumber);
}

MultiColumn _reconstructMultiColumn(JSObject instance) {
  final columnCountJS = getProperty<JSNumber>(instance, 'columnCount');
  final columnCount = (columnCountJS as JSNumber).toDartInt;
  final columnSpacingJS = getProperty<JSNumber>(instance, 'columnSpacing');
  final columnSpacing = (columnSpacingJS as JSNumber).toDartDouble;
  final childrenJS = getProperty<JSArray>(instance, 'children');
  final children = (childrenJS as JSArray).toDart
      .map((e) => reconstructWidget(e as JSObject))
      .toList();
  return MultiColumn(
    columnCount: columnCount,
    columnSpacing: columnSpacing,
    children: children,
  );
}

MultiColumnFlow _reconstructMultiColumnFlow(JSObject instance) {
  final columnCountJS = getProperty<JSNumber>(instance, 'columnCount');
  final columnCount = (columnCountJS as JSNumber).toDartInt;
  final columnSpacingJS = getProperty<JSNumber>(instance, 'columnSpacing');
  final columnSpacing = (columnSpacingJS as JSNumber).toDartDouble;
  final childrenJS = getProperty<JSArray>(instance, 'children');
  final children = (childrenJS as JSArray).toDart
      .map((e) => reconstructWidget(e as JSObject))
      .toList();
  return MultiColumnFlow(
    columnCount: columnCount,
    columnSpacing: columnSpacing,
    children: children,
  );
}

Padding _reconstructPadding(JSObject instance) {
  final paddingJS = getProperty<JSObject>(instance, 'padding');
  final padding = _reconstructEdgeInsets(paddingJS as JSObject);
  final childJS = getProperty<JSObject>(instance, 'child');
  final child = reconstructWidget(childJS as JSObject);
  return Padding(padding: padding, child: child);
}

PageContext _reconstructPageContext(JSObject instance) {
  final pageNumberJS = getProperty<JSNumber>(instance, 'pageNumber');
  final pageNumber = (pageNumberJS as JSNumber).toDartInt;
  final totalPagesJS = getProperty<JSNumber>(instance, 'totalPages');
  final totalPages = (totalPagesJS as JSNumber).toDartInt;
  final formattedPageNumberJS = getProperty<JSString>(
    instance,
    'formattedPageNumber',
  );
  final formattedPageNumber = (formattedPageNumberJS as JSString).toDart;
  final formattedTotalPagesJS = getProperty<JSString>(
    instance,
    'formattedTotalPages',
  );
  final formattedTotalPages = (formattedTotalPagesJS as JSString).toDart;
  final sectionPageCountJS = getProperty<JSNumber>(
    instance,
    'sectionPageCount',
  );
  final sectionPageCount = (sectionPageCountJS as JSNumber).toDartInt;
  final settingsJS = getProperty<JSObject>(instance, 'settings');
  final settings = _reconstructPageNumberSettings(settingsJS as JSObject);
  final metadataJS = getProperty<JSArray>(instance, 'metadata');
  final metadata = (metadataJS as JSArray).toDart
      .map((e) => _reconstructMetadataRecord(e as JSObject))
      .toList();
  return PageContext(
    pageNumber: pageNumber,
    totalPages: totalPages,
    formattedPageNumber: formattedPageNumber,
    formattedTotalPages: formattedTotalPages,
    sectionPageCount: sectionPageCount,
    settings: settings,
    metadata: metadata,
  );
}

PageFormat _reconstructPageFormat(JSObject instance) {
  final widthJS = getProperty<JSNumber>(instance, 'width');
  final width = (widthJS as JSNumber).toDartDouble;
  final heightJS = getProperty<JSNumber>(instance, 'height');
  final height = (heightJS as JSNumber).toDartDouble;
  return PageFormat(width, height);
}

PageNumberSettings _reconstructPageNumberSettings(JSObject instance) {
  final styleJS = getProperty<JSString>(instance, 'style');
  final style = _reconstructPageNumberStyle((styleJS as JSString).toDart);
  final startAtJS = getProperty<JSNumber>(instance, 'startAt');
  final startAt = (startAtJS as JSNumber).toDartInt;
  return PageNumberSettings(style: style, startAt: startAt);
}

Repeater _reconstructRepeater(JSObject instance) {
  final textJS = getProperty<JSString>(instance, 'text');
  final text = (textJS as JSString).toDart;
  final fontSizeJS = getProperty<JSNumber>(instance, 'fontSize');
  final fontSize = (fontSizeJS as JSNumber).toDartDouble;
  final fontJS = getProperty<JSObject>(instance, 'font');
  final font = fontJS == null ? null : reconstructFont(fontJS as JSObject);
  final lineHeightJS = getProperty<JSNumber>(instance, 'lineHeight');
  final lineHeight = (lineHeightJS as JSNumber).toDartDouble;
  return Repeater(text, fontSize: fontSize, font: font, lineHeight: lineHeight);
}

ResetPageNumber _reconstructResetPageNumber(JSObject instance) {
  final styleJS = getProperty<JSString>(instance, 'style');
  final style = _reconstructPageNumberStyle((styleJS as JSString).toDart);
  final startAtJS = getProperty<JSNumber>(instance, 'startAt');
  final startAt = (startAtJS as JSNumber).toDartInt;
  return ResetPageNumber(style: style, startAt: startAt);
}

RichText _reconstructRichText(JSObject instance) {
  final childrenJS = getProperty<JSArray>(instance, 'children');
  final children = (childrenJS as JSArray).toDart
      .map((e) => _reconstructTextSpan(e as JSObject))
      .toList();
  final fontSizeJS = getProperty<JSNumber>(instance, 'fontSize');
  final fontSize = (fontSizeJS as JSNumber).toDartDouble;
  final fontJS = getProperty<JSObject>(instance, 'font');
  final font = fontJS == null ? null : reconstructFont(fontJS as JSObject);
  final lineHeightJS = getProperty<JSNumber>(instance, 'lineHeight');
  final lineHeight = (lineHeightJS as JSNumber).toDartDouble;
  return RichText(
    children: children,
    fontSize: fontSize,
    font: font,
    lineHeight: lineHeight,
  );
}

Row _reconstructRow(JSObject instance) {
  final childrenJS = getProperty<JSArray>(instance, 'children');
  final children = (childrenJS as JSArray).toDart
      .map((e) => reconstructWidget(e as JSObject))
      .toList();
  return Row(children: children);
}

Size _reconstructSize(JSObject instance) {
  final widthJS = getProperty<JSNumber>(instance, 'width');
  final width = (widthJS as JSNumber).toDartDouble;
  final heightJS = getProperty<JSNumber>(instance, 'height');
  final height = (heightJS as JSNumber).toDartDouble;
  return Size(width, height);
}

SizedBox _reconstructSizedBox(JSObject instance) {
  final widthJS = getProperty<JSNumber>(instance, 'width');
  final width = widthJS == null ? null : (widthJS as JSNumber).toDartDouble;
  final heightJS = getProperty<JSNumber>(instance, 'height');
  final height = heightJS == null ? null : (heightJS as JSNumber).toDartDouble;
  final childJS = getProperty<JSObject>(instance, 'child');
  final child = childJS == null ? null : reconstructWidget(childJS as JSObject);
  return SizedBox(width: width, height: height, child: child);
}

SyncedColumns _reconstructSyncedColumns(JSObject instance) {
  final topChildrenJS = getProperty<JSArray>(instance, 'topChildren');
  final topChildren = (topChildrenJS as JSArray).toDart
      .map((e) => reconstructWidget(e as JSObject))
      .toList();
  final topColumnCountJS = getProperty<JSNumber>(instance, 'topColumnCount');
  final topColumnCount = (topColumnCountJS as JSNumber).toDartInt;
  final topColumnSpacingJS = getProperty<JSNumber>(
    instance,
    'topColumnSpacing',
  );
  final topColumnSpacing = (topColumnSpacingJS as JSNumber).toDartDouble;
  final bottomChildrenJS = getProperty<JSArray>(instance, 'bottomChildren');
  final bottomChildren = (bottomChildrenJS as JSArray).toDart
      .map((e) => reconstructWidget(e as JSObject))
      .toList();
  final bottomColumnCountJS = getProperty<JSNumber>(
    instance,
    'bottomColumnCount',
  );
  final bottomColumnCount = (bottomColumnCountJS as JSNumber).toDartInt;
  final bottomColumnSpacingJS = getProperty<JSNumber>(
    instance,
    'bottomColumnSpacing',
  );
  final bottomColumnSpacing = (bottomColumnSpacingJS as JSNumber).toDartDouble;
  final spacingJS = getProperty<JSNumber>(instance, 'spacing');
  final spacing = (spacingJS as JSNumber).toDartDouble;
  return SyncedColumns(
    topChildren: topChildren,
    topColumnCount: topColumnCount,
    topColumnSpacing: topColumnSpacing,
    bottomChildren: bottomChildren,
    bottomColumnCount: bottomColumnCount,
    bottomColumnSpacing: bottomColumnSpacing,
    spacing: spacing,
  );
}

Table _reconstructTable(JSObject instance) {
  final childrenJS = getProperty<JSArray>(instance, 'children');
  final children = (childrenJS as JSArray).toDart
      .map((e) => _reconstructTableRow(e as JSObject))
      .toList();
  final columnWidthsJS = getProperty<JSObject>(instance, 'columnWidths');
  final columnWidths = (() {
    final dartMap = <int, TableColumnWidth>{};
    final jsMap = columnWidthsJS as JSObject;
    for (final key in _jsObjectKeys(jsMap).toDart) {
      final keyString = (key as JSString).toDart;
      final jsValue = jsMap.getProperty(keyString.toJS);
      dartMap[int.parse(keyString)] =
          (jsValue == null
                  ? null
                  : reconstructTableColumnWidth(jsValue as JSObject))
              as TableColumnWidth;
    }
    return dartMap;
  })();
  final defaultVerticalAlignmentJS = getProperty<JSString>(
    instance,
    'defaultVerticalAlignment',
  );
  final defaultVerticalAlignment = _reconstructTableCellVerticalAlignment(
    (defaultVerticalAlignmentJS as JSString).toDart,
  );
  return Table(
    children: children,
    columnWidths: columnWidths,
    defaultVerticalAlignment: defaultVerticalAlignment,
  );
}

TableCell _reconstructTableCell(JSObject instance) {
  final childJS = getProperty<JSObject>(instance, 'child');
  final child = reconstructWidget(childJS as JSObject);
  final rowSpanJS = getProperty<JSNumber>(instance, 'rowSpan');
  final rowSpan = (rowSpanJS as JSNumber).toDartInt;
  final colSpanJS = getProperty<JSNumber>(instance, 'colSpan');
  final colSpan = (colSpanJS as JSNumber).toDartInt;
  final verticalAlignmentJS = getProperty<JSString>(
    instance,
    'verticalAlignment',
  );
  final verticalAlignment = _reconstructTableCellVerticalAlignment(
    (verticalAlignmentJS as JSString).toDart,
  );
  return TableCell(
    child: child,
    rowSpan: rowSpan,
    colSpan: colSpan,
    verticalAlignment: verticalAlignment,
  );
}

TableRow _reconstructTableRow(JSObject instance) {
  final childrenJS = getProperty<JSArray>(instance, 'children');
  final children = (childrenJS as JSArray).toDart
      .map((e) => _reconstructTableCell(e as JSObject))
      .toList();
  return TableRow(children: children);
}

Text _reconstructText(JSObject instance) {
  final textJS = getProperty<JSString>(instance, 'text');
  final text = (textJS as JSString).toDart;
  final styleJS = getProperty<JSObject>(instance, 'style');
  final style = _reconstructTextStyle(styleJS as JSObject);
  final fontSizeJS = getProperty<JSNumber>(instance, 'fontSize');
  final fontSize = fontSizeJS == null
      ? null
      : (fontSizeJS as JSNumber).toDartDouble;
  final fontJS = getProperty<JSObject>(instance, 'font');
  final font = fontJS == null ? null : reconstructFont(fontJS as JSObject);
  final lineHeightJS = getProperty<JSNumber>(instance, 'lineHeight');
  final lineHeight = (lineHeightJS as JSNumber).toDartDouble;
  return Text(
    text,
    style: style,
    fontSize: fontSize,
    font: font,
    lineHeight: lineHeight,
  );
}

TextSpan _reconstructTextSpan(JSObject instance) {
  final textJS = getProperty<JSString>(instance, 'text');
  final text = (textJS as JSString).toDart;
  final styleJS = getProperty<JSObject>(instance, 'style');
  final style = styleJS == null
      ? null
      : _reconstructTextStyle(styleJS as JSObject);
  final metadataJS = getProperty<JSArray>(instance, 'metadata');
  final metadata = metadataJS == null
      ? null
      : (metadataJS as JSArray).toDart
            .map((e) => _reconstructMetadataRecord(e as JSObject))
            .toList();
  return TextSpan(text, style: style, metadata: metadata);
}

TextStyle _reconstructTextStyle(JSObject instance) {
  final fontSizeJS = getProperty<JSNumber>(instance, 'fontSize');
  final fontSize = fontSizeJS == null
      ? null
      : (fontSizeJS as JSNumber).toDartDouble;
  final fontFamilyJS = getProperty<JSObject>(instance, 'fontFamily');
  final fontFamily = fontFamilyJS == null
      ? null
      : _reconstructFontFamily(fontFamilyJS as JSObject);
  final fontWeightJS = getProperty<JSString>(instance, 'fontWeight');
  final fontWeight = fontWeightJS == null
      ? null
      : _reconstructFontWeight((fontWeightJS as JSString).toDart);
  final fontStyleJS = getProperty<JSString>(instance, 'fontStyle');
  final fontStyle = fontStyleJS == null
      ? null
      : _reconstructFontStyle((fontStyleJS as JSString).toDart);
  final yOffsetFactorJS = getProperty<JSNumber>(instance, 'yOffsetFactor');
  final yOffsetFactor = yOffsetFactorJS == null
      ? null
      : (yOffsetFactorJS as JSNumber).toDartDouble;
  final decorationJS = getProperty<JSString>(instance, 'decoration');
  final decoration = decorationJS == null
      ? null
      : _reconstructTextDecoration((decorationJS as JSString).toDart);
  final decorationColorJS = getProperty<JSObject>(instance, 'decorationColor');
  final decorationColor = decorationColorJS == null
      ? null
      : _reconstructColor(decorationColorJS as JSObject);
  final decorationThicknessJS = getProperty<JSNumber>(
    instance,
    'decorationThickness',
  );
  final decorationThickness = decorationThicknessJS == null
      ? null
      : (decorationThicknessJS as JSNumber).toDartDouble;
  final leftPaddingJS = getProperty<JSNumber>(instance, 'leftPadding');
  final leftPadding = leftPaddingJS == null
      ? null
      : (leftPaddingJS as JSNumber).toDartDouble;
  final textColorJS = getProperty<JSObject>(instance, 'textColor');
  final textColor = textColorJS == null
      ? null
      : _reconstructColor(textColorJS as JSObject);
  return TextStyle(
    fontSize: fontSize,
    fontFamily: fontFamily,
    fontWeight: fontWeight,
    fontStyle: fontStyle,
    yOffsetFactor: yOffsetFactor,
    decoration: decoration,
    decorationColor: decorationColor,
    decorationThickness: decorationThickness,
    leftPadding: leftPadding,
    textColor: textColor,
  );
}

Underline _reconstructUnderline(JSObject instance) {
  final childJS = getProperty<JSObject>(instance, 'child');
  final child = reconstructWidget(childJS as JSObject);
  final colorJS = getProperty<JSObject>(instance, 'color');
  final color = _reconstructColor(colorJS as JSObject);
  final thicknessJS = getProperty<JSNumber>(instance, 'thickness');
  final thickness = (thicknessJS as JSNumber).toDartDouble;
  return Underline(child: child, color: color, thickness: thickness);
}

Widget reconstructWidget(JSObject instance) {
  final type = (getProperty<JSString>(instance, '_type')!).toDart;
  switch (type) {
    case 'ScriptAlign':
      return _reconstructAlign(instance);
    case 'ScriptColumn':
      return _reconstructColumn(instance);
    case 'ScriptDecoratedBox':
      return _reconstructDecoratedBox(instance);
    case 'ScriptExpanded':
      return _reconstructExpanded(instance);
    case 'ScriptFlow':
      return _reconstructFlow(instance);
    case 'ScriptFlowFill':
      return _reconstructFlowFill(instance);
    case 'ScriptFormattedText':
      return _reconstructFormattedText(instance);
    case 'ScriptKeepTogether':
      return _reconstructKeepTogether(instance);
    case 'ScriptLineBreakConfiguration':
      return _reconstructLineBreakConfiguration(instance);
    case 'ScriptMultiColumn':
      return _reconstructMultiColumn(instance);
    case 'ScriptMultiColumnFlow':
      return _reconstructMultiColumnFlow(instance);
    case 'ScriptPadding':
      return _reconstructPadding(instance);
    case 'ScriptRepeater':
      return _reconstructRepeater(instance);
    case 'ScriptResetPageNumber':
      return _reconstructResetPageNumber(instance);
    case 'ScriptRichText':
      return _reconstructRichText(instance);
    case 'ScriptRow':
      return _reconstructRow(instance);
    case 'ScriptSizedBox':
      return _reconstructSizedBox(instance);
    case 'ScriptSyncedColumns':
      return _reconstructSyncedColumns(instance);
    case 'ScriptTable':
      return _reconstructTable(instance);
    case 'ScriptTableCell':
      return _reconstructTableCell(instance);
    case 'ScriptText':
      return _reconstructText(instance);
    case 'ScriptUnderline':
      return _reconstructUnderline(instance);
    case 'ScriptImage':
      return reconstructImage(instance);
    case 'ScriptMetadataMarker':
      return reconstructMetadataMarker(instance);
    default:
      throw 'Unknown script widget type: $type';
  }
}
